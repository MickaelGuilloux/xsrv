---

##### NETDATA - ADDITIONAL MODULES #####

### NEEDRESTART ###

- name: install needrestart
  apt:
    state: present
    package: needrestart

- name: copy needrestart configuration
  template:
    src: 'etc_needrestart_conf.d_autorestart.conf.j2'
    dest: '/etc/needrestart/conf.d/autorestart.conf'
    mode: 0600

- name: generate initial needrestart report
  command: needrestart -b > /var/log/needrestart.log
  args:
    creates: "/var/log/needrestart.log"

- name: add a cron job to refresh needrestart report every hour
  cron:
    cron_file: "needrestart"
    month: "*"
    day: "*"
    hour: "*"
    minute: "0"
    job: /usr/sbin/needrestart -b > /var/log/needrestart.log 2>&1
    name: "needrestart"
    user: root

- name: clone netdata-needrestart module
  git:
    dest: "/root/netdata-needrestart"
    repo: "{{ netdata_needrestart_git_url }}"
    version: "1.0.1"
    accept_hostkey: yes
    force: yes # discard modified files

- name: configure dpkg to refresh the file after each run
  copy:
    remote_src: yes
    src: "/root/netdata-needrestart/etc_apt_apt.conf.d_99needrestart"
    dest: "/etc/apt/apt.conf.d/99needrestart"
    mode: 0644

# this task runs even in check mode so that the next task does not fail on non-existing directories
- name: ensure netdata-needrestart directories exist
  file:
    state: directory
    mode: 0755
    path: "{{ item }}"
  with_items:
    - '{{ netdata_install_prefix }}/usr/libexec/netdata/python.d/'
    - '{{ netdata_install_prefix }}/etc/netdata/health.d/'
  check_mode: no

- name: install netdata-needrestart module/configuration/alarms
  copy:
    remote_src: yes
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: netdata
    mode: 0640
  with_items:
    - { src: '/root/netdata-needrestart/needrestart.chart.py', dest: '{{ netdata_install_prefix }}/usr/libexec/netdata/python.d/needrestart.chart.py' }
    - { src: '/root/netdata-needrestart/needrestart.conf', dest: '{{ netdata_install_prefix }}/usr/libexec/netdata/python.d/needrestart.conf' }
    - { src: '/root/netdata-needrestart/health.d_needrestart.conf', dest: '{{ netdata_install_prefix }}/etc/netdata/health.d/needrestart.conf' }
  notify: restart netdata

### LOGCOUNT ###

- name: install lnav log viewer
  apt:
    package: lnav
    state: present

- name: clone netdata-logcount module
  git:
    dest: "/root/netdata-logcount"
    repo: "{{ netdata_logcount_git_url }}"
    version: "1.0.3"
    accept_hostkey: yes
    force: yes # discard modified files

- name: create directory for netdata-logcount lnav script
  file:
    path: /opt/netdata-logcount/
    state: directory
    mode: 0755

- name: copy configuration/lnav script for netdata-logcount
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: netdata
    mode: 0640
  with_items:
    - { src: 'opt_netdata-logcount_logcount.sql.j2', dest: '/opt/netdata-logcount/logcount.sql' }
    - { src: 'etc_netdata_python.d_logcount.conf.j2', dest: '{{ netdata_install_prefix }}/etc/netdata/python.d/logcount.conf' }
    - { src: 'etc_netdata_health.d_logcount.conf.j2', dest: '{{ netdata_install_prefix }}/etc/netdata/health.d/logcount.conf' }
  notify: restart netdata

- name: install netdata-logcount module
  copy:
    remote_src: yes
    src: "/root/netdata-logcount/logcount.chart.py"
    dest: "{{ netdata_install_prefix }}/usr/libexec/netdata/python.d/logcount.chart.py"
    owner: root
    group: netdata
    mode: 0750
  notify: restart netdata

- name: add a cron job to refresh the logcount state file
  cron:
    cron_file: "logcount"
    month: "*"
    day: "*"
    hour: "*"
    minute: "*/{{ netdata_logcount_update_interval }}"
    job: script --return --quiet -c "/usr/bin/lnav /var/log/syslog -n -f /opt/netdata-logcount/logcount.sql" > /dev/null
    name: "logcount"
    user: root

- name: set read permissions for netdata on /var/cache/logcount
  file:
    path: /var/cache/logcount
    state: touch
    owner: root
    group: netdata
    mode: 0640
    modification_time: preserve
    access_time: preserve

### MODTIME ###

- name: clone netdata-modtime module
  git:
    dest: "/root/netdata-modtime"
    repo: "{{ netdata_modtime_git_url }}"
    version: "0.1.0"
    accept_hostkey: yes
    force: yes # discard modified files

- name: copy configuration for netdata-modtime
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: netdata
    mode: 0640
  with_items:
    - { src: 'etc_netdata_python.d_modtime.conf.j2', dest: '{{ netdata_install_prefix }}/etc/netdata/python.d/modtime.conf' }
    - { src: 'etc_netdata_health.d_modtime.conf.j2', dest: '{{ netdata_install_prefix }}/etc/netdata/health.d/modtime.conf' }
  notify: restart netdata

- name: install netdata-modtime module
  copy:
    remote_src: yes
    src: "/root/netdata-modtime/modtime.chart.py"
    dest: "{{ netdata_install_prefix }}/usr/libexec/netdata/python.d/modtime.chart.py"
    owner: root
    group: netdata
    mode: 0750
  notify: restart netdata
  when: not ansible_check_mode

### DEBSECAN ###

- name: install debsecan
  apt:
    state: present
    package: debsecan

- name: clone netdata-debsecan module
  git:
    dest: "/root/netdata-debsecan"
    repo: "{{ netdata_debsecan_git_url }}"
    version: "1.0.2"
    accept_hostkey: yes
    force: yes # discard modified files

- name: install netdata-debsecan module/script/configuration
  copy:
    remote_src: yes
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: netdata
    mode: "{{ item.mode }}"
  with_items:
    - { src: "/root/netdata-debsecan/debsecan.chart.py", dest: "{{ netdata_install_prefix }}/usr/libexec/netdata/python.d/debsecan.chart.py", mode: "0755" }
    - { src: "/root/netdata-debsecan/usr_local_bin_debsecan-by-type", dest: "/usr/local/bin/debsecan-by-type", mode: "0755" }
    - { src: "/root/netdata-debsecan/debsecan.conf", dest: "{{ netdata_install_prefix }}/etc/netdata/python.d/debsecan.conf", mode: "0644" }
  notify: restart netdata
  when: not ansible_check_mode

- name: generate initial debsecan reports
  command: /usr/local/bin/debsecan-by-type
  args:
    creates: "/var/log/debsecan/debsecan.log"

- name: add a cron job to refresh debsecan reports every hour
  cron:
    cron_file: "debsecan"
    month: "*"
    day: "*"
    hour: "*"
    minute: "0"
    job: /usr/local/bin/debsecan-by-type
    name: "debsecan"
    user: root
