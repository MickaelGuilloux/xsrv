##### COMMON/GENERAL SYSTEM SETTINGS #####

##### DNS RESOLVER #####

# update DNS nameserver settings (resolv.conf) (yes/no)
setup_dns: no

# list of DNS nameservers IP addresses
# Example:
# dns_nameservers:
#   - "1.1.1.1"
#   - "1.0.0.1"
dns_nameservers: []

##### SYSCTL (NETWORKING/MEMORY) #####

# update sysctl settings (yes/no)
setup_sysctl: yes

# Enable/disable packet forwarding between network interfaces (routing) (yes/no)
sysctl_allow_forwarding: no

# answer ICMP pings (yes/no)
sysctl_answer_ping: no

# "swappiness" setting. 100: swap/reclaim RAM aggressively. 0: do not swap unless necessary
sysctl_vm_swappiness: '10'

# "VFS cache pressure" setting. 100+ : prefer caching memory pages over disk cache
sysctl_vm_vfs_cache_pressure: '150'

# yes/no: enable/disable creation of core dumps on kernel crashes
# These are usually not needed and may contain sensitive information
os_security_kernel_enable_core_dump: no


##### PACKAGE MANAGEMENT #####

# yes/no: setup APT sources (security, backports) and automatic security upgrades
setup_apt: yes


##### DATE/TIME #####

# timezone name (if commented out, timezone will not be changed)
# timezone: "Etc/UTC"


##### SSH SERVER #####

# setup/harden SSH server (yes/no)
setup_ssh: yes

# List of public SSH key files to authorize on the server for the ansible user
# Example: ['public_keys/john.pub', 'public_keys/jane.pub']
ssh_authorized_keys: []

# a list of public keys that are never accepted by the ssh server
ssh_server_revoked_keys: []

# sshd and SFTP server log levels, respecively (QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2, DEBUG3)
ssh_log_level: "VERBOSE"
ssh_sftp_loglevel: "VERBOSE"

# types of SSH TCP forwarding to allow (no, local, remote, all - QUOTED)
# remote/all is required to use the host as a jumpbox
ssh_allow_tcp_forwarding: "no"

# enable/disable root SSH logins (yes, no - QUOTED)
ssh_permit_root_login: "no"

# enable/disable SSH password authentication (yes, no - QUOTED)
ssh_password_authentication: "no"


##### FIREWALL #####

# setup firewall (yes/no)
setup_firewall: yes

# alias for LAN addresses (CIDR notation,comma-separated values)
firehol_alias_lan: "10.0.0.0/8,192.168.0.0/16,172.16.0.0/12"

# Firewall rules
# By default a single global network chain is defined (traffic on any interface, from any source)
# Restrict traffic to individual source/destination IPs in earch rule's src/dst value
# Or create additional network definitions for more complex setups.
firehol_networks:
  - name: "global" # a name for this rule set
    src: "any" # traffic to/from any IP address
    interface: "any" # traffic to/from any network interface
    policy: "RETURN" # policy to apply for traffic that matches no rules match (one of DROP/RETURN/ACCEPT/REJECT)
    allow_input: # incoming traffic to allow (name: service name, src: source IP address/subnet)
      - { name: "ssh", src: "any" } # ssh from anywhere
      # - { name: "netdata", src: "{{ firehol_alias_lan }}" } # monitoring dashboard
      # - { name: "http", src: "{{ firehol_alias_lan }}" } # web server
      # - { name: "https", src: "{{ firehol_alias_lan }}" } # web server
      # - { name: "mumble", src: "{{ firehol_alias_lan }}" } # mumble voip server
      # - { name: "ping", src: "{{ firehol_alias_lan }}" } # incoming ICMP pings
      # - { name: "samba", src: "{{ firehol_alias_lan }}" } # samba file sharing
      # - { name: "pulseaudio", src: "{{ firehol_alias_lan }}" } # pulseaudio sound server
      # - { name: "mdns", src: "any" } # avahi/zeroconf/MDNS/DNS-SD/uPnP, requires src: any
      # - { name: "multicast", src: "any" } # avahi/zeroconf/MDNS/DNS-SD/uPnP, requires src=any
      # - { name: "sshcustom", src: "any" } # SSH server on custom port
      # - { name: "transmission", src: "any", } # incoming bittorrent peer connections
      # - { name: "rtc", src: "any", } # jitsi meet audio/video conferencing
      # - { name: "ldap", src: "{{ firehol_alias_lan }}", } # LDAP (plain/insecure) from LAN
      # - { name: "ldaps", src: "{{ firehol_alias_lan }}", } # LDAP (SSL/secure) from LAN
    allow_output: # outgoing traffic to allow (name: service name, dst: destination IP address/subnet)
      - { name: "dns", dst: "any" } # DNS queries to anywhere
      - { name: "ntp", dst: "any" } # time/date synchronization
      - { name: "dhcp", dst: "{{ firehol_alias_lan }}" } # DHCP requests on LAN
      - { name: "http", dst: "any" } # outgoing HTTP requests
      - { name: "https", dst: "any" } # outgoing HTTPS requests
      - { name: "ping", dst: "any" } # outgoing ICMP pings
      - { name: "submission", dst: "any" } # outgoing mail/port 587
      # - { name: "imaps", dst: "any" } # nextcloud mail
      # - { name: "imaps585", dst: "any" } # nextcloud mail
      # - { name: "imap", dst: "any" } # nextcloud mail
      # - { name: "smtps", dst: "any" } # nextcloud mail
      # - { name: "smtp", dst: "any" } # nextcloud mail
      # - { name: "ssh", dst: "any" } # ssh/git access to anywhere
      # - { name: "all", dst: "any" } # allow ALL outgoing connections


# Router definitions - traffic forwarding between network interfaces
# Example:
# firehol_routers:
#   - name: "docker" # arbitrary name for the router, example for docker
#     allow_route_to: # forward these services from any interface, to the interface specified
#       - { name: "http", to_interface: "docker_gwbridge" }
#       - { name: "https", to_interface: "docker_gwbridge" }
#       - { name: "git", to_interface: "docker_gwbridge" }
#     allow_route_from: # forward these services to any interface, from the interface specified
#       - { name: "any", from_interface: "docker_gwbridge" }
#       - { name: "any", from_interface: "docker0" }
firehol_routers: []

# if docker role is enabled, add relevant firewall/router rules (yes/no):
# - allow traffic from host to containers
# - allow traffic between containers
# - allow all outgoing swarm traffic
# - insert SNAT rules for outgoing swarm traffic
firehol_docker_swarm_compat: yes


# custom services definitions, in addition to https://firehol.org/services/
firehol_custom_services:
  - { name: "sshcustom", ports: "tcp/722" } # SSH server on custom port
  - { name: "mumble", ports: "tcp/64738 udp/64738" } # mumble voip server
  - { name: "netdata", ports: "tcp/19999" } # netdata monitoring dashboard/API
  - { name: "mdns", ports: "udp/5353" } # avahi/zeroconf/MDNS/DNS-SD
  - { name: "pulseaudio", ports: "tcp/4713" } # pulseaudio sound server
  - { name: "transmission", ports: "tcp/52943 udp/52943" } # incoming bittorrent/transmission peer connections
  - { name: "iscsi", ports: "tcp/3260" } # iSCSI initiator
  - { name: "dropboxlan", ports: "udp/17500" } # Dropbox LAN sync
  - { name: "imaps585", ports: "tcp/585" } # IMAPS on port 585


##### FAIL2BAN #####

# setup fail2ban bruteforce detection/prevention system (yes/no)
setup_fail2ban: yes

# list of IPs to never ban - 127.0.0.1 is always ignored
fail2ban_ignoreip:
  - '10.0.0.0/8'
  - '192.168.0.0/16'
  - '172.16.0.0/12'

# fail2ban default ban duration (in seconds or time abbreviation format)
fail2ban_default_bantime: "1year"
# fail2ban: default interval (in seconds or time abbreviation format) before counting failures towards a ban
fail2ban_default_findtime: "10min"
# fail2ban default number of failures that have to occur in the last findtime to ban the IP
fail2ban_default_maxretry: 5
# destination email address used for some actions
fail2ban_destemail: "root@localhost"


##### USERS #####

# Additional user accounts to create.
# Supports these user (https://docs.ansible.com/ansible/latest/modules/user_module.html) module parameters:
#   name, password, comment, create_home, home, groups, append, generate_ssh_key, update_password
# Additional supported parameters:
#   ssh_authorized_keys: list of public key files to authorize on this account
#   sudo_nopasswd_commands: list of commands the user should be able to run with sudo without password
# Example:
# linux_users:
#    - name: "remotebackup"
#      password: "{{ vault_linux_users_remotebackup_password }}"
#      groups: [ "ssh", "sudo" ]
#      comment: "limited user account for remote backups"
#      ssh_authorized_keys: []
#      sudo_nopasswd_commands: ['/usr/bin/rsync']
linux_users: []

# allow ansible connecting user to run 'sudo rsync' without password (yes/no)
# Required to use the ansible synchronize module, and download files generated by the backup role
ansible_user_allow_sudo_rsync_nopasswd: yes

##### OUTGOING MAIL #####

# install outgoing system mail client/local MTA (yes/no)
# The system will not be able to send status/monitoring e-mails unless this is enabled
setup_msmtp: no

# If msmtp is enabled, the following values must be set
# System mail relay (SMTP server) to use, and authentication username/password
msmtp_host: "{{ vault_msmtp_host }}"
msmtp_username: "{{ vault_msmtp_username }}"
msmtp_password: "{{ vault_msmtp_password }}"
# Mail address to send all local mail to
msmtp_admin_email: "{{ vault_msmtp_admin_email }}"

# (optional) TLS certificate fingerprint of the SMTP server - use this to accept a self-signed certificate
# Get the server's certificate fingerprint with openssl s_client -connect $smtp_host:587 -starttls smtp < /dev/null 2>/dev/null |openssl x509 -fingerprint -noout
# msmtp_host_fingerprint: '11:22:33:44:55:66:77:88:99:00:13:37:AA:BB:CC:DD:EE:FF:AD:C2'

##### PACKAGES #####

# install a basic set of interactive command-line diagnostic/file manipulation/shell utilities (yes/no)
# see tasks/50utilities.yml for the full list
setup_cli_utils: yes

# install haveged entropy generator (yes/no)
# good to have on virtual machines where system is frequently running out of entropy
setup_haveged: yes
