#!/bin/bash
set -o errexit
set -o nounset

# Configuration / defaults
venv_dir="${XSRV_VENV_DIR:=$HOME/.local/share/xsrv/venv}"
playbooks_dir="${XSRV_PLAYBOOKS_DIR:=$HOME/playbooks}"
templates_path="${XSRV_TEMPLATES_DIR:=/opt/xsrv}"
editor="${EDITOR:=nano}"
ansible_tags="${TAGS:-}"


# Functions
function check_playbook() {
    if [[ ! -e "$playbooks_dir/$playbook_name" ]]; then
        echo "[xsrv] ERROR: playbook $playbooks_dir/$playbook_name does not exist"; exit 1;
    fi
}

function deploy() {
    # run ansible playbook
    check_playbook
    if [[ ! -z "$host_name" ]]; then ansible_host_arg="--limit=$host_name"; else ansible_host_arg=""; fi
    if [[ ! -z "$ansible_tags" ]]; then ansible_tags_arg="--tags=$ansible_tags"; else ansible_tags_arg=""; fi
    cd "$playbooks_dir/$playbook_name"
    echo "[xsrv] INFO: deploying playbook $playbook_name"
    ansible-playbook playbook.yml $ansible_tags_arg $ansible_host_arg
}

function check() {
    # run ansible playbook in check mode
    check_playbook
    cd "$playbooks_dir/$playbook_name"
    echo "[xsrv] INFO: deploying playbook $playbook_name"
    ansible-playbook playbook.yml --check --diff
}

function edit_playbook() {
    # edit a playbook file
    playbook_file="$playbooks_dir/$playbook_name/playbook.yml"
    echo "[xsrv] INFO: opening playbook file $playbook_file"
    $editor "$playbook_file"
}

function edit_inventory() {
    # edit an inventory file
    inventory_file="$playbooks_dir/$playbook_name/inventory.yml"
    echo "[xsrv] INFO: opening inventory file $inventory_file"
    $editor "$inventory_file"
}


function check_host_name() {
    if [[ -z "$host_name" ]]; then
        host_vars_dirs=$(find "$playbooks_dir/$playbook_name/host_vars/" -maxdepth 1 -type d)
        host_name="${host_vars_dirs##*/}"
        echo "[xsrv] DEBUG: host_vars_dirs: $host_vars_dirs"
        echo "[xsrv] INFO: no host name provided, using $host_name as host name"
        if [[ ! $(echo "$host_name" | wc -l) -eq 1 ]]; then
            echo "[xsrv] ERROR: no host name specified and multiple hosts found in playbook"; exit 1
        fi
    fi

    host_vars_file="$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.yml"
    host_vault_file="$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.vault.yml"

    if [[ ! -f "$host_vars_file" ]]; then
        echo "[xsrv] ERROR: $host_vars_file does not exist"; exit 1
    fi
}

function edit_host() {
    # edit a host's vars file
    check_playbook
    check_host_name
    echo "[xsrv] INFO: opening host vars file $host_vars_file"
    $editor "$host_vars_file"
}


function edit_vault() {
    # edit a host's vault file
    check_playbook
    check_host_name
    cd "$playbooks_dir/$playbook_name"
    EDITOR="$editor" ansible-vault edit "$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.vault.yml"
}

function init_playbook() {
    # add a new playbook (from template files)
    if [[ -e "$playbooks_dir/$playbook_name" ]]; then
        echo "[xsrv] ERROR: $playbooks_dir/$playbook_name already exists"; exit 1
    fi

    echo "[xsrv] INFO: copying xsrv playbook to $playbooks_dir/$playbook_name"
    cp -rn "$templates_path/playbooks/xsrv" "$playbooks_dir/$playbook_name"
    rm "$playbooks_dir/$playbook_name/inventory.yml" "$playbooks_dir/$playbook_name/playbook.yml"
    rm -r "$playbooks_dir/$playbook_name/host_vars/my.example.org"

    update_roles

    echo "[xsrv] INFO: Generating random password for ansible-vault"
    openssl rand -base64 32 > "$playbooks_dir/$playbook_name/.ansible-vault-password"
    echo "[xsrv] INFO: vault password stored in $playbooks_dir/$playbook_name/.ansible-vault-password"
    echo "[xsrv] INFO: Keep this file private! Keep backups of this file!"

    init_host

    echo "[xsrv] INFO: playbook '$playbook_name' initialized"
    echo "[xsrv] INFO: run $0 deploy to apply configuration now, or $0 help for more options"
}

function init_host() {
    # add a new host to a playbook (from template files)
    check_playbook

    until [[ ! -z "$host_name" ]]; do
        read -r -p "[xsrv] Name of the host to add to the playbook: " host_name
    done
    if [[ -e "$playbooks_dir/$playbook_name/host_vars/$host_name" ]]; then
        echo "[xsrv] ERROR: $playbooks_dir/$playbook_name/host_vars/$host_name already exists"; exit 1
    fi

    echo "[xsrv] INFO: creating host vars/vault files for $host_name"
    if [[ -f "$playbooks_dir/$playbook_name/inventory.yml" ]]; then
        sed "s/my.example.org/$host_name/g" "$templates_path/playbooks/xsrv/inventory.yml" >> "$playbooks_dir/$playbook_name/inventory.yml"
    else
        echo "    $host_name" >> "$playbooks_dir/$playbook_name/inventory.yml"
    fi
    sed "s/my.example.org/$host_name/g" "$templates_path/playbooks/xsrv/playbook.yml" >> "$playbooks_dir/$playbook_name/playbook.yml"
    mkdir "$playbooks_dir/$playbook_name/host_vars/$host_name"
    sed "s/my.example.org/$host_name/g" "$templates_path/playbooks/xsrv/host_vars/my.example.org/my.example.org.yml" > "$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.yml"
    sed "s/my.example.org/$host_name/g" "$templates_path/playbooks/xsrv/host_vars/my.example.org/my.example.org.vault.yml" > "$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.vault.yml"

    read -r -p "[xsrv] Press ENTER to edit the playbook (enable/disable roles)"
    edit_playbook "$playbook_name"
    read -r -p "[xsrv] Press ENTER to edit host variables (replace any values labeled CHANGEME) "
    edit_host "$playbook_name" "$host_name"

    echo "[xsrv] INFO: Encrypting secrets file"
    (cd "$playbooks_dir/$playbook_name/" && ansible-vault encrypt "$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.vault.yml")
    read -r -p "[xsrv] Press ENTER to edit secret (vaulted) host variables (replace any values labeled CHANGEME) "
    edit_vault "$playbook_name" "$host_name"
    echo "[xsrv] INFO: Host is ready for deployment. Run xsrv deploy $playbook_name $host_name"
}

function get_ssh_port() {
	ssh_port=$(grep "^ansible_ssh_port" "$host_vars_file" | cut -d ' ' -f 2 | tr -d \'\")
    if [[ -z "$ssh_port" ]]; then
        ssh_port=22
    fi
}

function run_shell() {
    # open a SSH shell on a host
    check_playbook
    check_host_name
    get_ssh_port

    cd "$playbooks_dir/$playbook_name"
    vault_vars=$(ansible-vault decrypt --output - "$host_vault_file")
    ssh_user=$(echo "$vault_vars" | grep "^vault_ansible_user:" | cut -d ' ' -f 2 | tr -d \'\")

    ssh_command="ssh -t -p $ssh_port $ssh_user@$host_name $ssh_args"
    $ssh_command
}

function utils() {
    echo "TODO"
    exit 1
}

function info() {
    echo "TODO"
    exit 1
}

function fetch_backups() {
    echo "TODO"
    exit 1
}

function help() {
    echo "$usage"
    exit 1
}

function update_roles() {
    check_playbook
    echo "[xsrv] INFO: copying roles from $templates_path to $playbooks_dir/$playbook_name"
    cp -r "$templates_path/roles" "$playbooks_dir/$playbook_name/"
}

function init_venv() {
    echo "[xsrv] INFO: creating virtualenv in $venv_dir"
    mkdir -p "$venv_dir"
    python3 -m venv "$venv_dir"
    source "$venv_dir/bin/activate"
    echo "[xsrv] INFO: installing ansible in $venv_dir"
    pip3 install wheel
    pip3 install ansible==2.9.9
}

function upgrade() {
    cd "$templates_path"
    echo "[xsrv] INFO: fetching repository to $templates_path"
    sudo git pull --ff-only
    update_roles
    echo "[xsrv] INFO: installing new version of xsrv script to /usr/local/bin/"
    sudo cp "$templates_path/xsrv" /usr/local/bin
}

function show_defaults() {
    # shellcheck disable=SC2002
    cat $templates_path/roles/*/defaults/main.yml | less
}

function _main() {
    if [[ -z "$command" ]]; then echo "[xsrv] ERROR: no command provided"; echo "$usage"; exit 1; fi
    case "$command" in
        "init-playbook") init_venv; shift; init_playbook ;;
        "init-host") init_venv; shift; init_host ;;
        "deploy") init_venv; shift; deploy ;;
        "check") init_venv; shift; check ;;
        "edit-playbook") shift; edit_playbook ;;
        "edit-inventory") shift; edit_inventory ;;
        "edit-host") shift; edit_host ;;
        "edit-vault") init_venv; shift; edit_vault ;;
        "shell") init_venv; shift; run_shell ;;
        "utils") shift; run_utils ;;
        "info") init_venv; shift; info ;;
        "logs") init_venv; shift; ssh_args="sudo lnav /var/log/syslog"; run_shell ;;
        "help") echo "$usage" ;;
        "fetch-backups") fetch_backups ;;
        "upgrade") upgrade ;;
        "show-defaults") show_defaults ;;
        *) echo "[xsrv] ERROR: unrecognized command $command"; exit 1 ;;
    esac
}


############################"

# Usage
usage='USAGE: xsrv COMMAND [playbook] [host]
init-playbook   initialize a new playbook
init-host       add a new host to an existing playbook
deploy          deploy a playbook
check           simulate deployment, report what would be changed
edit-playbook   edit a playbook
edit-inventory  edit inventory file for a playbook
edit-host       edit a host vars file
edit-vault      edit a host vault file
shell           open an interactive shell on a host
utils           run the xsrv-utils script on a host
info            display quick access links for a host
logs            view system log on a host
help            show this message
fetch-backups   fetch backups from a host to the playbook backups dir
upgrade         ugrade xsrv script and roles to latest versions
show-defaults   show all available role variables and their default values

The following environment variables are supported
TAGS=tag1,tag2  limit deployment to a set of ansible tags (eg. TAGS=monitoring xsrv deploy)
'

command="${1:-}"
playbook_name="${2:-default}"
host_name="${3:-}"
ssh_args=""
_main "$@"